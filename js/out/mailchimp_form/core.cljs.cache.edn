;; Analyzed by ClojureScript 0.0-2934
{:defs {prompt-message {:protocol-inline nil, :meta {:arglists (quote ([message])), :doc "A prompt that will animate to help the user with a given input", :end-column 22, :end-line 42, :column 7, :line 42, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/prompt-message, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 22, :method-params ([message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([message])), :doc "A prompt that will animate to help the user with a given input", :test true}, name-form {:protocol-inline nil, :meta {:arglists (quote ([name-atom])), :end-column 17, :end-line 86, :column 7, :line 86, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/name-form, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 17, :method-params ([name-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name-atom])), :test true}, wrap-as-element-in-form {:protocol-inline nil, :meta {:arglists (quote ([element])), :end-column 31, :end-line 121, :column 7, :line 121, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/wrap-as-element-in-form, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 31, :method-params ([element]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([element])), :test true}, check-nil-then-predicate {:protocol-inline nil, :meta {:arglists (quote ([value predicate])), :doc "Check if the value is nil, then apply the predicate", :end-column 32, :end-line 14, :column 7, :line 14, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/check-nil-then-predicate, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 32, :method-params ([value predicate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 2}), :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value predicate])), :doc "Check if the value is nil, then apply the predicate", :test true}, current-page {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 20, :end-line 141, :column 7, :line 141, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/current-page, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 0}), :line 141, :end-line 141, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, password-form {:protocol-inline nil, :meta {:arglists (quote ([password])), :end-column 21, :end-line 105, :column 7, :line 105, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/password-form, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 21, :method-params ([password]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([password])), :test true}, input-and-prompt {:protocol-inline nil, :meta {:arglists (quote ([label-value input-name input-type input-element-arg prompt-element required?])), :doc "Creates an input box and a prompt box that appears above the input when the input comes into focus. Also throws in a little required message", :end-column 24, :end-line 63, :column 7, :line 63, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/input-and-prompt, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 24, :method-params ([label-value input-name input-type input-element-arg prompt-element required?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 6}), :line 63, :end-line 63, :max-fixed-arity 6, :fn-var true, :arglists (quote ([label-value input-name input-type input-element-arg prompt-element required?])), :doc "Creates an input box and a prompt box that appears above the input when the input comes into focus. Also throws in a little required message", :test true}, has-number? {:protocol-inline nil, :meta {:arglists (quote ([word])), :end-column 19, :end-line 37, :column 7, :line 37, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/has-number?, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 19, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 1}), :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :test true}, eight-or-more-characters? {:protocol-inline nil, :meta {:arglists (quote ([word])), :end-column 33, :end-line 27, :column 7, :line 27, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/eight-or-more-characters?, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 33, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 1}), :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :test true}, home-page {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 17, :end-line 127, :column 7, :line 127, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/home-page, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 127, :end-line 127, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, init! {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 13, :end-line 164, :column 7, :line 164, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/init!, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 164, :end-line 164, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, email-form {:protocol-inline nil, :meta {:arglists (quote ([email-address-atom])), :end-column 18, :end-line 77, :column 7, :line 77, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/email-form, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 18, :method-params ([email-address-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([email-address-atom])), :test true}, password-requirements {:protocol-inline nil, :meta {:arglists (quote ([password requirements])), :doc "A list to describe which password requirements have been met so far", :end-column 29, :end-line 95, :column 7, :line 95, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/password-requirements, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 29, :method-params ([password requirements]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([password requirements])), :doc "A list to describe which password requirements have been met so far", :test true}, input-element {:protocol-inline nil, :meta {:arglists (quote ([id name type value in-focus])), :doc "An input element which updates its value and on focus parameters on change, blur, and focus", :end-column 21, :end-line 49, :column 7, :line 49, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/input-element, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 21, :method-params ([id name type value in-focus]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 5}), :line 49, :end-line 49, :max-fixed-arity 5, :fn-var true, :arglists (quote ([id name type value in-focus])), :doc "An input element which updates its value and on focus parameters on change, blur, and focus", :test true}, valid-email? {:protocol-inline nil, :meta {:arglists (quote ([email])), :end-column 20, :end-line 22, :column 7, :line 22, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/valid-email?, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 20, :method-params ([email]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 1}), :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([email])), :test true}, hook-browser-navigation! {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 32, :end-line 154, :column 7, :line 154, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/hook-browser-navigation!, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/History, :variadic false, :max-fixed-arity 0}), :line 154, :end-line 154, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, has-special-character? {:protocol-inline nil, :meta {:arglists (quote ([word])), :end-column 30, :end-line 32, :column 7, :line 32, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/src/cljs/mailchimp_form/core.cljs"}, :name mailchimp-form.core/has-special-character?, :variadic false, :file "src/cljs/mailchimp_form/core.cljs", :end-column 30, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 1}), :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :test true}}, :name mailchimp-form.core, :doc nil, :excludes #{}, :use-macros nil, :require-macros {secretary.core secretary.core, secretary secretary.core}, :uses {atom reagent.core}, :requires {reagent reagent.core, secretary secretary.core, reagent.session reagent.session, session reagent.session, EventType goog.history.EventType, reagent.core reagent.core, react cljsjs.react, goog.history.EventType goog.history.EventType, cljsjs.react cljsjs.react, History goog.History, events goog.events, secretary.core secretary.core, goog.events goog.events}, :imports {History goog.History}}