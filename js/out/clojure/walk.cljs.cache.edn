;; Analyzed by ClojureScript 0.0-2934
{:defs {postwalk-replace {:protocol-inline nil, :meta {:arglists (quote ([smap form])), :added "1.1", :doc "Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the leaves of the tree first.", :end-column 24, :end-line 88, :column 7, :line 88, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/resources/public/js/out/clojure/walk.cljs"}, :added "1.1", :name clojure.walk/postwalk-replace, :variadic false, :file "resources/public/js/out/clojure/walk.cljs", :end-column 24, :method-params ([smap form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([smap form])), :doc "Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the leaves of the tree first.", :test true}, prewalk-replace {:protocol-inline nil, :meta {:arglists (quote ([smap form])), :added "1.1", :doc "Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the root of the tree first.", :end-column 23, :end-line 80, :column 7, :line 80, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/resources/public/js/out/clojure/walk.cljs"}, :added "1.1", :name clojure.walk/prewalk-replace, :variadic false, :file "resources/public/js/out/clojure/walk.cljs", :end-column 23, :method-params ([smap form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([smap form])), :doc "Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the root of the tree first.", :test true}, stringify-keys {:protocol-inline nil, :meta {:arglists (quote ([m])), :added "1.1", :doc "Recursively transforms all map keys from keywords to strings.", :end-column 22, :end-line 72, :column 7, :line 72, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/resources/public/js/out/clojure/walk.cljs"}, :added "1.1", :name clojure.walk/stringify-keys, :variadic false, :file "resources/public/js/out/clojure/walk.cljs", :end-column 22, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Recursively transforms all map keys from keywords to strings.", :test true}, keywordize-keys {:protocol-inline nil, :meta {:arglists (quote ([m])), :added "1.1", :doc "Recursively transforms all map keys from strings to keywords.", :end-column 23, :end-line 64, :column 7, :line 64, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/resources/public/js/out/clojure/walk.cljs"}, :added "1.1", :name clojure.walk/keywordize-keys, :variadic false, :file "resources/public/js/out/clojure/walk.cljs", :end-column 23, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Recursively transforms all map keys from strings to keywords.", :test true}, prewalk {:protocol-inline nil, :meta {:arglists (quote ([f form])), :added "1.1", :doc "Like postwalk, but does pre-order traversal.", :end-column 15, :end-line 58, :column 7, :line 58, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/resources/public/js/out/clojure/walk.cljs"}, :added "1.1", :name clojure.walk/prewalk, :variadic false, :file "resources/public/js/out/clojure/walk.cljs", :end-column 15, :method-params ([f form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f form])), :doc "Like postwalk, but does pre-order traversal.", :test true}, postwalk {:protocol-inline nil, :meta {:arglists (quote ([f form])), :added "1.1", :doc "Performs a depth-first, post-order traversal of form.  Calls f on\n  each sub-form, uses f's return value in place of the original.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.", :end-column 16, :end-line 50, :column 7, :line 50, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/resources/public/js/out/clojure/walk.cljs"}, :added "1.1", :name clojure.walk/postwalk, :variadic false, :file "resources/public/js/out/clojure/walk.cljs", :end-column 16, :method-params ([f form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f form])), :doc "Performs a depth-first, post-order traversal of form.  Calls f on\n  each sub-form, uses f's return value in place of the original.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.", :test true}, walk {:protocol-inline nil, :meta {:arglists (quote ([inner outer form])), :added "1.1", :doc "Traverses form, an arbitrary data structure.  inner and outer are\n  functions.  Applies inner to each element of form, building up a\n  data structure of the same type, then applies outer to the result.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.", :end-column 12, :end-line 37, :column 7, :line 37, :file "/Users/dhruv/Documents/engineering/experiments/mailchimp-form-cljs/resources/public/js/out/clojure/walk.cljs"}, :added "1.1", :name clojure.walk/walk, :variadic false, :file "resources/public/js/out/clojure/walk.cljs", :end-column 12, :method-params ([inner outer form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 37, :end-line 37, :max-fixed-arity 3, :fn-var true, :arglists (quote ([inner outer form])), :doc "Traverses form, an arbitrary data structure.  inner and outer are\n  functions.  Applies inner to each element of form, building up a\n  data structure of the same type, then applies outer to the result.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.", :test true}}, :name clojure.walk, :doc "This file defines a generic tree walker for Clojure data\nstructures.  It takes any data structure (list, vector, map, set,\nseq), calls a function on every element, and uses the return value\nof the function in place of the original.  This makes it fairly\neasy to write recursive search-and-replace functions, as shown in\nthe examples.\n\nNote: \"walk\" supports all Clojure data structures EXCEPT maps\ncreated with sorted-map-by.  There is no (obvious) way to retrieve\nthe sorting function.", :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil}